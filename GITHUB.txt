Sección 4.-----------------------------------------------------------------------------------------------------------------------------------

git .init                                  -- Instalacion local del GIT --

git status                              -- Estado del GIT en un momento dado --

git add file.txt                    -- Añade archivo al Stage Area --

git add .                               -- Añade todos los archivos al Stage Area --

git add -u                            -- Quita los archivos borrados (-u UPDATE) para no incorporar al Stage Area --

git add -A                            -- Añade todos los archivos al Stage Area, borrados, cambios -ALL   --

git reset HEAD <archivo>    -- Quita el archivo del Stage Area --

git reset HEAD .               -- Quita  todos archivos del Stage Area --

git checkout -- <archivo>        -- Cancela los cambios realizados en archivo, hasta ultima version --

git checkout -- .       -- Cancela los cambios realizados en todos archivos, hasta ultima version --

git commit -m "mensaje para el commit"      -- Añade todos los archivos al GITLOCAL Rep --

git commit -a -m "mensaje para el commit"      -- Añade todos los archivos al GITLOCAL Rep --

git log                         -- Muestra todos los commits realizados --

git help log            -- Muestra ayuda para el command LOG --

git log   --online                      -- Muestra todos los commits realizados  en una linea--

git log   --online --decorate --graph --all        -- Muestra todos los commits realizados  todos repositorios en una linea opcs--

git config --global alias.hist "log --oneline --graph --decorate --all "  -- opcion de guardar alias para comandos y opcs --


git config --global -l           -- Muestra lista de CONFIG --
git show                      -- Muestra el ultimo commit realizado--

git reflog                      -- Muestra los commit realizados--

q                     -- salir de los logs--

git ls-files        -- Muestra los archivos trackeados para GIT ()--

git ls-files        -- Muestra los archivos trackeados para GIT ()--

git commit --amend  -- Abre el editor para cambiar un mensaje de commit erroneo --

para salir del editor o hacer cambios    i -para insertar- x -para eliminar- y finalmente :x -para guardar y salir-


Sección 5.-----------------------------------------------------------------------------------------------------------------------------------

git diff ____34 _____23     -- Diferencias entre 2 commits --

git diff ____34 HEAD     -- Diferencias entre 1 commit y el actual HEAD, ultimo --

git branch     -- ver todos los branchs ACTIVOS --

git checkout -b nuevo     -- Creado BRANCH con el nombre nuevo --

git checkout master     -- volver al branch MASTER --

git checkout nuevo     -- volver al branch NUEVO --

git checkout nuevo     -- volver al branch MASTER --

<<<<<<< HEAD
git merge     nuevo                  --integrar los cambios del branch nuevo en master ----

git branch -d nuevo     -- borrar el BRANCH nuevo --
=======
git branch -d nuevo     -- borrar el BRANCH nuevos --
>>>>>>> nuevo

git stash                       -- Crear un stash, vuelve HEAD atras y deja el cambio como WorkInProgress --

git stash list              -- Listado de Stash actuales en HEAD --

git stash pop              -- Borrado de stash list e integración de todos los cambios guardadosen Stash --

git reset <comittID> --soft              -- Hacer que el Head apunte al commit ID blando --

git reset <comittID> --mixed             -- Hacer que el Head apunte al commit ID mezclado --

git reset <comittID> --hard             -- Hacer que el Head apunte al commit ID duro --


Sección 8.--------------------------------------------------------------------------------------------------------------------------------

git clone <URL> <nombre de la Carpeta local donde hacer el clone> --recurse-submodules

git fetch               -- trae los cambios del remoto sin integrarlos -- 

git fetch -p               -- trae los cambios del remoto sin integrarlos  con la op. prune -- 

get pull                -- trae los cambios del remoto y los integra -merge- en el HEAD --

git push -u origin master -- integra los cambios del local en el remoto --

git push                 -- integra los cambios del local en el remoto --

git remote set-url origin <nuevaURL>  -- cambiar la URL del remote origin --

Sección 9.--------------------------------------------------------------------------------------------------------------------------------

git push -u origin <nombreBRANCH>  -- update el remote con un BRANCH local --

git branch -a               -- listado de BRANCH todos --

git push -u origin -d <nombreBRACHremote>  -- borrar BRANCH remote desde local --

git push -u origin :<nombreBRACHremote>  -- borrar BRANCH remote desde local, otro modo igual que con los tags --

git pull -all       -- recupera del remote e integra todo, incluido remote BRANCHS --

git pull --rebase  -- merge locally and remote, pero con los cambios locales por delante --





Sección 10.--------------------------------------------------------------------------------------------------------------------------------

Local Tags:

git tag								-- Lista los tags del Master, actual --					

git tag lo-que-me-salga-del-pijo master				-- Crea tag en el Master Local --

git tag -a v-3.0 -m "version local v-3.0" (4144c95-RefCommit)    -- Crea tag en la ref commit 4144c95 --

git push origin --tags  					-- Envía los tags a GitHub repository--

git tag -d v-3.0						-- Borra local tag v-3.0 --

git push origin :lo-que-me-salga-del-pijo			-- Borra el tag en el repositorio remoto GitHub --

git tag -f v-3.o 68190ff					-- Edita el tag v-3.0 para asociarlo a commit 68190ff --

git push -f origin v-3.o				        -- Edita el tag v-3.0 para asociarlo a commit 68190ff en remotoGitHub--

git push --force origin v-3.o				        -- Edita el tag v-3.0 para asociarlo a commit 68190ff en remotoGitHub forzado--


Sección 11.-----------------------------------------------------------------------------------------------------------------------------------

Pull -Requests

master@{4days}                              -- Compara el Branch con el de hace 4 dias --

HEAD@{3}                                            -- Compara el Branch con el HEADMaster posicion 3 --

HEAD^                                                   -- Compara el Branch con el ultimo 1 menos --

git remote add upstream "nuevaURL"       -- Inserta un nuevo Remote para hacer push fetch pull --

git pull upstream master                -- inserta, o merge los cambios de upstream en master --


Sección 12.-----------------------------------------------------------------------------------------------------------------------------------


